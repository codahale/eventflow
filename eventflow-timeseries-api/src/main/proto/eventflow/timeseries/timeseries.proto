syntax = "proto3";

package eventflow.timeseries;

import "google/protobuf/timestamp.proto";

option java_package = "io.eventflow.timeseries.api";
option java_outer_classname = "TimeSeriesPB";
option java_multiple_files = true;

// A service which provides access to time series data.
service TimeSeriesService {
  // Returns the intervals and values for a time series.
  rpc GetIntervalValues (GetIntervalValuesRequest) returns (IntervalValues) {
  }
}

message GetIntervalValuesRequest {
  // The name of the time series to retrieve.
  string name = 1;

  // The beginning of the range to retrieve, inclusive.
  google.protobuf.Timestamp start = 2;

  // The end of the range to retrieve, exclusive.
  google.protobuf.Timestamp end = 3;

  // The name of the time zone in which date/time operations will be performed.
  string time_zone = 4;

  // The level of granularity of intervals to return.
  Granularity granularity = 5;

  // The aggregate function to be used for the measurements in each interval.
  AggregateFunction aggregateFunction = 6;
}

// IntervalValues is a list of interval timestamps and their corresponding values.
message IntervalValues {
  // The epoch second timestamps indicating the beginning of the intervals. These are represented
  // as int64 values so that responses will benefit from packed encoding.
  repeated int64 timestamps = 1;

  // The values of the intervals, corresponding in index to timestamps.
  repeated double values = 2;

  // The read timestamp of the Spanner transaction, setting the upper bound for staleness.
  google.protobuf.Timestamp read_timestamp = 3;
}

// Granularity is the amount of time in a given interval. By default, a time series contains
// minutely intervals.
enum Granularity {
  GRAN_MINUTE = 0;
  GRAN_HOUR = 1;
  GRAN_DAY = 2;
  GRAN_WEEK = 3;
  GRAN_ISOWEEK = 4;
  GRAN_MONTH = 5;
  GRAN_QUARTER = 6;
  GRAN_YEAR = 7;
  GRAN_ISOYEAR = 8;
}

// An aggregate function aggregates the minutely interval values to form less granular intervals. If
// none is specified, the time series's minutely aggregate function is used.
enum AggregateFunction {
  AGG_NONE = 0;
  AGG_SUM = 1;
  AGG_MAX = 2;
  AGG_MIN = 3;
  AGG_AVG = 4;
}
